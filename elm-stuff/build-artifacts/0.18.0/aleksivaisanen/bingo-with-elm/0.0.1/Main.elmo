var _aleksivaisanen$bingo_with_elm$Main$showPlayedNumbers = function (list) {
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('played-numbers'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$map,
			function (l) {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('played-number-item'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(l)),
						_1: {ctor: '[]'}
					});
			},
			list));
};
var _aleksivaisanen$bingo_with_elm$Main$pressSquare = F4(
	function (isPressed, gmbrd, a, b) {
		return (_elm_lang$core$Native_Utils.eq(a.number, b.number) && A2(
			_elm_lang$core$List$any,
			function (x) {
				return _elm_lang$core$Native_Utils.eq(x, a.number);
			},
			gmbrd.playedNumbers)) ? _elm_lang$core$Native_Utils.update(
			b,
			{pressed: isPressed}) : b;
	});
var _aleksivaisanen$bingo_with_elm$Main$transpose = function (listOfLists) {
	transpose:
	while (true) {
		var _p0 = listOfLists;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p0._0.ctor === '[]') {
				var _v1 = _p0._1;
				listOfLists = _v1;
				continue transpose;
			} else {
				var _p1 = _p0._1;
				var tails = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$tail, _p1);
				var heads = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$head, _p1);
				return {
					ctor: '::',
					_0: {ctor: '::', _0: _p0._0._0, _1: heads},
					_1: _aleksivaisanen$bingo_with_elm$Main$transpose(
						{ctor: '::', _0: _p0._0._1, _1: tails})
				};
			}
		}
	}
};
var _aleksivaisanen$bingo_with_elm$Main$checkRows = function (gmbrd) {
	checkRows:
	while (true) {
		var listOfLists = _chendrix$elm_matrix$Matrix$toList(gmbrd.gameMatrix);
		var firstList = _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$take, 1, listOfLists));
		if (_elm_lang$core$Native_Utils.eq(
			firstList,
			{ctor: '[]'})) {
			return false;
		} else {
			if (_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(
					A2(
						_elm_lang$core$List$filter,
						function (x) {
							return A2(
								_elm_lang$core$List$any,
								function (y) {
									return _elm_lang$core$Native_Utils.eq(y, x.number);
								},
								gmbrd.playedNumbers) && x.pressed;
						},
						firstList)),
				5)) {
				return true;
			} else {
				var _v2 = _elm_lang$core$Native_Utils.update(
					gmbrd,
					{
						gameMatrix: _chendrix$elm_matrix$Matrix$fromList(
							A2(_elm_lang$core$List$drop, 1, listOfLists))
					});
				gmbrd = _v2;
				continue checkRows;
			}
		}
	}
};
var _aleksivaisanen$bingo_with_elm$Main$split = F2(
	function (n, list) {
		var _p2 = A2(_elm_lang$core$List$take, n, list);
		if (_p2.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p2,
				_1: A2(
					_aleksivaisanen$bingo_with_elm$Main$split,
					n,
					A2(_elm_lang$core$List$drop, n, list))
			};
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$initSquare = function ($int) {
	return {number: $int, pressed: false};
};
var _aleksivaisanen$bingo_with_elm$Main$locToSquare = F2(
	function (matrix, loc) {
		var _p3 = A2(_chendrix$elm_matrix$Matrix$get, loc, matrix);
		if (_p3.ctor === 'Just') {
			return _p3._0;
		} else {
			return _aleksivaisanen$bingo_with_elm$Main$initSquare(-1);
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$twoRandomLists = F2(
	function (list, listTwo) {
		return A2(
			_elm_lang$core$Random$pair,
			_elm_community$random_extra$Random_List$shuffle(list),
			_elm_community$random_extra$Random_List$shuffle(listTwo));
	});
var _aleksivaisanen$bingo_with_elm$Main$gameboardDiagonals = {
	ctor: '::',
	_0: A2(_chendrix$elm_matrix$Matrix$loc, 0, 0),
	_1: {
		ctor: '::',
		_0: A2(_chendrix$elm_matrix$Matrix$loc, 1, 1),
		_1: {
			ctor: '::',
			_0: A2(_chendrix$elm_matrix$Matrix$loc, 2, 2),
			_1: {
				ctor: '::',
				_0: A2(_chendrix$elm_matrix$Matrix$loc, 3, 3),
				_1: {
					ctor: '::',
					_0: A2(_chendrix$elm_matrix$Matrix$loc, 4, 4),
					_1: {
						ctor: '::',
						_0: A2(_chendrix$elm_matrix$Matrix$loc, 4, 0),
						_1: {
							ctor: '::',
							_0: A2(_chendrix$elm_matrix$Matrix$loc, 3, 1),
							_1: {
								ctor: '::',
								_0: A2(_chendrix$elm_matrix$Matrix$loc, 2, 2),
								_1: {
									ctor: '::',
									_0: A2(_chendrix$elm_matrix$Matrix$loc, 1, 3),
									_1: {
										ctor: '::',
										_0: A2(_chendrix$elm_matrix$Matrix$loc, 0, 4),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _aleksivaisanen$bingo_with_elm$Main$checkDiagonals = function (gmbrd) {
	var matrix = gmbrd.gameMatrix;
	var sqrListOne = A2(
		_elm_lang$core$List$map,
		_aleksivaisanen$bingo_with_elm$Main$locToSquare(matrix),
		A2(_elm_lang$core$List$take, 5, _aleksivaisanen$bingo_with_elm$Main$gameboardDiagonals));
	var sqrListTwo = A2(
		_elm_lang$core$List$map,
		_aleksivaisanen$bingo_with_elm$Main$locToSquare(matrix),
		A2(_elm_lang$core$List$drop, 5, _aleksivaisanen$bingo_with_elm$Main$gameboardDiagonals));
	var playedNums = gmbrd.playedNumbers;
	return (_elm_lang$core$Native_Utils.eq(
		sqrListOne,
		{ctor: '[]'}) || _elm_lang$core$Native_Utils.eq(
		sqrListTwo,
		{ctor: '[]'})) ? false : (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(
			A2(
				_elm_lang$core$List$filter,
				function (x) {
					return A2(
						_elm_lang$core$List$any,
						function (y) {
							return _elm_lang$core$Native_Utils.eq(y, x.number);
						},
						playedNums) && x.pressed;
				},
				sqrListOne)),
		5) ? true : (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(
			A2(
				_elm_lang$core$List$filter,
				function (x) {
					return A2(
						_elm_lang$core$List$any,
						function (y) {
							return _elm_lang$core$Native_Utils.eq(y, x.number);
						},
						playedNums) && x.pressed;
				},
				sqrListTwo)),
		5) ? true : false));
};
var _aleksivaisanen$bingo_with_elm$Main$gameboard = {
	gameMatrix: A3(
		_chendrix$elm_matrix$Matrix$matrix,
		5,
		5,
		function (location) {
			return _aleksivaisanen$bingo_with_elm$Main$initSquare(0);
		}),
	gameNumbers: A2(_elm_lang$core$List$range, 1, 75),
	gameboardNumbers: A2(_elm_lang$core$List$range, 1, 75),
	playedNumbers: {ctor: '[]'}
};
var _aleksivaisanen$bingo_with_elm$Main$Square = F2(
	function (a, b) {
		return {number: a, pressed: b};
	});
var _aleksivaisanen$bingo_with_elm$Main$Gameboard = F4(
	function (a, b, c, d) {
		return {gameMatrix: a, gameNumbers: b, gameboardNumbers: c, playedNumbers: d};
	});
var _aleksivaisanen$bingo_with_elm$Main$GameOver = F2(
	function (a, b) {
		return {ctor: 'GameOver', _0: a, _1: b};
	});
var _aleksivaisanen$bingo_with_elm$Main$Playing = function (a) {
	return {ctor: 'Playing', _0: a};
};
var _aleksivaisanen$bingo_with_elm$Main$playNextNumber = function (model) {
	var _p4 = model;
	switch (_p4.ctor) {
		case 'BeginGame':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				{ctor: '[]'});
		case 'Playing':
			var _p5 = _p4._0;
			var newGameboard = _p5;
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_aleksivaisanen$bingo_with_elm$Main$Playing(
					_elm_lang$core$Native_Utils.update(
						newGameboard,
						{
							gameNumbers: A2(_elm_lang$core$List$drop, 1, _p5.gameNumbers),
							playedNumbers: A2(
								_elm_lang$core$List$append,
								_p5.playedNumbers,
								A2(_elm_lang$core$List$take, 1, _p5.gameNumbers))
						})),
				{ctor: '[]'});
		default:
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				{ctor: '[]'});
	}
};
var _aleksivaisanen$bingo_with_elm$Main$checkWinHelper = function (gmbrd) {
	return (_aleksivaisanen$bingo_with_elm$Main$checkRows(gmbrd) || (_aleksivaisanen$bingo_with_elm$Main$checkRows(
		_elm_lang$core$Native_Utils.update(
			gmbrd,
			{
				gameMatrix: _chendrix$elm_matrix$Matrix$fromList(
					_aleksivaisanen$bingo_with_elm$Main$transpose(
						_chendrix$elm_matrix$Matrix$toList(gmbrd.gameMatrix)))
			})) || _aleksivaisanen$bingo_with_elm$Main$checkDiagonals(gmbrd))) ? A2(
		_aleksivaisanen$bingo_with_elm$Main$GameOver,
		gmbrd,
		_elm_lang$core$List$length(gmbrd.playedNumbers)) : _aleksivaisanen$bingo_with_elm$Main$Playing(gmbrd);
};
var _aleksivaisanen$bingo_with_elm$Main$checkWin = F2(
	function (sqr, model) {
		var _p6 = model;
		switch (_p6.ctor) {
			case 'BeginGame':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'Playing':
				var _p7 = _p6._0;
				var newMatrix = A2(
					_chendrix$elm_matrix$Matrix$map,
					A3(_aleksivaisanen$bingo_with_elm$Main$pressSquare, true, _p7, sqr),
					_p7.gameMatrix);
				var newGameboard = _p7;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_aleksivaisanen$bingo_with_elm$Main$checkWinHelper(
						_elm_lang$core$Native_Utils.update(
							newGameboard,
							{gameMatrix: newMatrix})),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$BeginGame = {ctor: 'BeginGame'};
var _aleksivaisanen$bingo_with_elm$Main$createModel = A2(
	_elm_lang$core$Platform_Cmd_ops['!'],
	_aleksivaisanen$bingo_with_elm$Main$BeginGame,
	{ctor: '[]'});
var _aleksivaisanen$bingo_with_elm$Main$GameboardClick = function (a) {
	return {ctor: 'GameboardClick', _0: a};
};
var _aleksivaisanen$bingo_with_elm$Main$createSquare = function (square) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('squareContainer'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('square'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'squareButton', _1: true},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'pressed', _1: square.pressed},
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_aleksivaisanen$bingo_with_elm$Main$GameboardClick(square)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(square.number)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _aleksivaisanen$bingo_with_elm$Main$NextNumber = {ctor: 'NextNumber'};
var _aleksivaisanen$bingo_with_elm$Main$wrapper = F2(
	function (gmbrd, overlay) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('site-wrapper'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h1,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Your gameboard'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('container'),
								_1: {ctor: '[]'}
							},
							_chendrix$elm_matrix$Matrix$flatten(
								A2(_chendrix$elm_matrix$Matrix$map, _aleksivaisanen$bingo_with_elm$Main$createSquare, gmbrd.gameMatrix))),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_aleksivaisanen$bingo_with_elm$Main$NextNumber),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Next number'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _aleksivaisanen$bingo_with_elm$Main$showPlayedNumbers(gmbrd.playedNumbers),
										_1: {
											ctor: '::',
											_0: overlay,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _aleksivaisanen$bingo_with_elm$Main$Shuffle = function (a) {
	return {ctor: 'Shuffle', _0: a};
};
var _aleksivaisanen$bingo_with_elm$Main$randomList = A2(
	_elm_lang$core$Random$generate,
	_aleksivaisanen$bingo_with_elm$Main$Shuffle,
	A2(_aleksivaisanen$bingo_with_elm$Main$twoRandomLists, _aleksivaisanen$bingo_with_elm$Main$gameboard.gameNumbers, _aleksivaisanen$bingo_with_elm$Main$gameboard.gameboardNumbers));
var _aleksivaisanen$bingo_with_elm$Main$update = F2(
	function (msg, model) {
		var _p8 = msg;
		switch (_p8.ctor) {
			case 'NoOp':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'StartGame':
				return {ctor: '_Tuple2', _0: model, _1: _aleksivaisanen$bingo_with_elm$Main$randomList};
			case 'Shuffle':
				var _p9 = _p8._0._1;
				var newGameboardNumbers = A2(_elm_lang$core$List$take, 25, _p9);
				var listOfLists = A2(_aleksivaisanen$bingo_with_elm$Main$split, 5, newGameboardNumbers);
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_aleksivaisanen$bingo_with_elm$Main$Playing(
						_elm_lang$core$Native_Utils.update(
							_aleksivaisanen$bingo_with_elm$Main$gameboard,
							{
								gameMatrix: A2(
									_chendrix$elm_matrix$Matrix$map,
									_aleksivaisanen$bingo_with_elm$Main$initSquare,
									_chendrix$elm_matrix$Matrix$fromList(listOfLists)),
								gameNumbers: _p8._0._0,
								gameboardNumbers: A2(_elm_lang$core$List$take, 25, _p9)
							})),
					{ctor: '[]'});
			case 'NextNumber':
				return _aleksivaisanen$bingo_with_elm$Main$playNextNumber(model);
			default:
				var _p10 = _p8._0;
				return (!_p10.pressed) ? A2(_aleksivaisanen$bingo_with_elm$Main$checkWin, _p10, model) : A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$StartGame = {ctor: 'StartGame'};
var _aleksivaisanen$bingo_with_elm$Main$playAgainOverlay = function (rounds) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('congratulations'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Congratulations!'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'You won after ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(rounds),
									' rounds!'))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Do you want to play again?'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_aleksivaisanen$bingo_with_elm$Main$StartGame),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Play again!'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _aleksivaisanen$bingo_with_elm$Main$startScreen = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('site-wrapper'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h1,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Elm Bingo!'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Instructions'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Your objective is to get five in a row on your gameboard either vertically, horizontally or diagonally. \n                \'Next number\' button gives you the next number to check on your gameboard. \n                After you see you have the same number on your gameboard, \n                just click on the correct number on your gameboard and that square will turn green. \n                When you have 5 in a row in your gameboard, you have won the game.'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Simple, isn\'t it?'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h2,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Do you want to start the game?'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_aleksivaisanen$bingo_with_elm$Main$StartGame),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Start game!'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$br,
												{ctor: '[]'},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$br,
													{ctor: '[]'},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Author:'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Aleksi Väisänen 2018'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$view = function (model) {
	var _p11 = model;
	switch (_p11.ctor) {
		case 'BeginGame':
			return _aleksivaisanen$bingo_with_elm$Main$startScreen;
		case 'Playing':
			return A2(
				_aleksivaisanen$bingo_with_elm$Main$wrapper,
				_p11._0,
				_elm_lang$html$Html$text(''));
		default:
			return A2(
				_aleksivaisanen$bingo_with_elm$Main$wrapper,
				_p11._0,
				_aleksivaisanen$bingo_with_elm$Main$playAgainOverlay(_p11._1));
	}
};
var _aleksivaisanen$bingo_with_elm$Main$main = _elm_lang$html$Html$program(
	{
		init: _aleksivaisanen$bingo_with_elm$Main$createModel,
		view: _aleksivaisanen$bingo_with_elm$Main$view,
		update: _aleksivaisanen$bingo_with_elm$Main$update,
		subscriptions: function (_p12) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
var _aleksivaisanen$bingo_with_elm$Main$NoOp = {ctor: 'NoOp'};
