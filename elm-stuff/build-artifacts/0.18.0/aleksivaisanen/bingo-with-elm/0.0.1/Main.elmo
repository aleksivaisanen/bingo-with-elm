var _aleksivaisanen$bingo_with_elm$Main$showPlayedNumbers = function (list) {
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('played-numbers'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$map,
			function (l) {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('played-number-item'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(l)),
						_1: {ctor: '[]'}
					});
			},
			list));
};
var _aleksivaisanen$bingo_with_elm$Main$pressSquare = F5(
	function (isPressed, gmbrd, gameNums, a, b) {
		return (_elm_lang$core$Native_Utils.eq(a.number, b.number) && A2(
			_elm_lang$core$List$any,
			function (x) {
				return _elm_lang$core$Native_Utils.eq(x, a.number);
			},
			gameNums.playedNums)) ? _elm_lang$core$Native_Utils.update(
			b,
			{pressed: isPressed}) : b;
	});
var _aleksivaisanen$bingo_with_elm$Main$transpose = function (listOfLists) {
	transpose:
	while (true) {
		var _p0 = listOfLists;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p0._0.ctor === '[]') {
				var _v1 = _p0._1;
				listOfLists = _v1;
				continue transpose;
			} else {
				var _p1 = _p0._1;
				var tails = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$tail, _p1);
				var heads = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$head, _p1);
				return {
					ctor: '::',
					_0: {ctor: '::', _0: _p0._0._0, _1: heads},
					_1: _aleksivaisanen$bingo_with_elm$Main$transpose(
						{ctor: '::', _0: _p0._0._1, _1: tails})
				};
			}
		}
	}
};
var _aleksivaisanen$bingo_with_elm$Main$checkRows = F2(
	function (gmbrd, gameNums) {
		checkRows:
		while (true) {
			var listOfLists = _chendrix$elm_matrix$Matrix$toList(gmbrd.gameMatrix);
			var firstList = _elm_lang$core$List$concat(
				A2(_elm_lang$core$List$take, 1, listOfLists));
			if (_elm_lang$core$Native_Utils.eq(
				firstList,
				{ctor: '[]'})) {
				return false;
			} else {
				if (_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$List$length(
						A2(
							_elm_lang$core$List$filter,
							function (x) {
								return A2(
									_elm_lang$core$List$any,
									function (y) {
										return _elm_lang$core$Native_Utils.eq(y, x.number);
									},
									{ctor: '::', _0: 0, _1: gameNums.playedNums}) && x.pressed;
							},
							firstList)),
					5)) {
					return true;
				} else {
					var _v2 = _elm_lang$core$Native_Utils.update(
						gmbrd,
						{
							gameMatrix: _chendrix$elm_matrix$Matrix$fromList(
								A2(_elm_lang$core$List$drop, 1, listOfLists))
						}),
						_v3 = gameNums;
					gmbrd = _v2;
					gameNums = _v3;
					continue checkRows;
				}
			}
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$split = F2(
	function (n, list) {
		var _p2 = A2(_elm_lang$core$List$take, n, list);
		if (_p2.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p2,
				_1: A2(
					_aleksivaisanen$bingo_with_elm$Main$split,
					n,
					A2(_elm_lang$core$List$drop, n, list))
			};
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$initSquare = function ($int) {
	return _elm_lang$core$Native_Utils.eq($int, 0) ? {number: $int, pressed: true} : {number: $int, pressed: false};
};
var _aleksivaisanen$bingo_with_elm$Main$locToSquare = F2(
	function (matrix, loc) {
		var _p3 = A2(_chendrix$elm_matrix$Matrix$get, loc, matrix);
		if (_p3.ctor === 'Just') {
			return _p3._0;
		} else {
			return _aleksivaisanen$bingo_with_elm$Main$initSquare(-1);
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$gameboardDiagonals = {
	ctor: '::',
	_0: A2(_chendrix$elm_matrix$Matrix$loc, 0, 0),
	_1: {
		ctor: '::',
		_0: A2(_chendrix$elm_matrix$Matrix$loc, 1, 1),
		_1: {
			ctor: '::',
			_0: A2(_chendrix$elm_matrix$Matrix$loc, 2, 2),
			_1: {
				ctor: '::',
				_0: A2(_chendrix$elm_matrix$Matrix$loc, 3, 3),
				_1: {
					ctor: '::',
					_0: A2(_chendrix$elm_matrix$Matrix$loc, 4, 4),
					_1: {
						ctor: '::',
						_0: A2(_chendrix$elm_matrix$Matrix$loc, 4, 0),
						_1: {
							ctor: '::',
							_0: A2(_chendrix$elm_matrix$Matrix$loc, 3, 1),
							_1: {
								ctor: '::',
								_0: A2(_chendrix$elm_matrix$Matrix$loc, 2, 2),
								_1: {
									ctor: '::',
									_0: A2(_chendrix$elm_matrix$Matrix$loc, 1, 3),
									_1: {
										ctor: '::',
										_0: A2(_chendrix$elm_matrix$Matrix$loc, 0, 4),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _aleksivaisanen$bingo_with_elm$Main$checkDiagonals = F2(
	function (gmbrd, gameNums) {
		var matrix = gmbrd.gameMatrix;
		var sqrListOne = A2(
			_elm_lang$core$List$map,
			_aleksivaisanen$bingo_with_elm$Main$locToSquare(matrix),
			A2(_elm_lang$core$List$take, 5, _aleksivaisanen$bingo_with_elm$Main$gameboardDiagonals));
		var sqrListTwo = A2(
			_elm_lang$core$List$map,
			_aleksivaisanen$bingo_with_elm$Main$locToSquare(matrix),
			A2(_elm_lang$core$List$drop, 5, _aleksivaisanen$bingo_with_elm$Main$gameboardDiagonals));
		var playedNums = gameNums.playedNums;
		return (_elm_lang$core$Native_Utils.eq(
			sqrListOne,
			{ctor: '[]'}) || _elm_lang$core$Native_Utils.eq(
			sqrListTwo,
			{ctor: '[]'})) ? false : (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(
				A2(
					_elm_lang$core$List$filter,
					function (x) {
						return A2(
							_elm_lang$core$List$any,
							function (y) {
								return _elm_lang$core$Native_Utils.eq(y, x.number);
							},
							{ctor: '::', _0: 0, _1: playedNums}) && x.pressed;
					},
					sqrListOne)),
			5) ? true : (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(
				A2(
					_elm_lang$core$List$filter,
					function (x) {
						return A2(
							_elm_lang$core$List$any,
							function (y) {
								return _elm_lang$core$Native_Utils.eq(y, x.number);
							},
							{ctor: '::', _0: 0, _1: playedNums}) && x.pressed;
					},
					sqrListTwo)),
			5) ? true : false));
	});
var _aleksivaisanen$bingo_with_elm$Main$gameNumbers = {
	toBePlayed: A2(_elm_lang$core$List$range, 1, 75),
	playedNums: {ctor: '[]'}
};
var _aleksivaisanen$bingo_with_elm$Main$gameboard = {
	gameMatrix: A3(
		_chendrix$elm_matrix$Matrix$matrix,
		5,
		5,
		function (location) {
			return _aleksivaisanen$bingo_with_elm$Main$initSquare(0);
		}),
	gameboardNumbers: A2(_elm_lang$core$List$range, 1, 75)
};
var _aleksivaisanen$bingo_with_elm$Main$Square = F2(
	function (a, b) {
		return {number: a, pressed: b};
	});
var _aleksivaisanen$bingo_with_elm$Main$Gameboard = F2(
	function (a, b) {
		return {gameMatrix: a, gameboardNumbers: b};
	});
var _aleksivaisanen$bingo_with_elm$Main$GameNumbers = F2(
	function (a, b) {
		return {toBePlayed: a, playedNums: b};
	});
var _aleksivaisanen$bingo_with_elm$Main$GameOver = F3(
	function (a, b, c) {
		return {ctor: 'GameOver', _0: a, _1: b, _2: c};
	});
var _aleksivaisanen$bingo_with_elm$Main$Playing = F2(
	function (a, b) {
		return {ctor: 'Playing', _0: a, _1: b};
	});
var _aleksivaisanen$bingo_with_elm$Main$playNextNumber = F2(
	function (model, num) {
		var _p4 = model;
		switch (_p4.ctor) {
			case 'BeginGame':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'Playing':
				var _p5 = _p4._1;
				var nextRandomNum = num;
				var newGameNums = _p5;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(
						_aleksivaisanen$bingo_with_elm$Main$Playing,
						_p4._0,
						_elm_lang$core$Native_Utils.update(
							newGameNums,
							{
								toBePlayed: A2(
									_elm_lang$core$List$filter,
									function (x) {
										return !_elm_lang$core$Native_Utils.eq(x, nextRandomNum);
									},
									_p5.toBePlayed),
								playedNums: A2(
									_elm_lang$core$List$append,
									_p5.playedNums,
									{
										ctor: '::',
										_0: nextRandomNum,
										_1: {ctor: '[]'}
									})
							})),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$checkWinHelper = F2(
	function (gmbrd, gameNums) {
		return (A2(_aleksivaisanen$bingo_with_elm$Main$checkRows, gmbrd, gameNums) || (A2(
			_aleksivaisanen$bingo_with_elm$Main$checkRows,
			_elm_lang$core$Native_Utils.update(
				gmbrd,
				{
					gameMatrix: _chendrix$elm_matrix$Matrix$fromList(
						_aleksivaisanen$bingo_with_elm$Main$transpose(
							_chendrix$elm_matrix$Matrix$toList(gmbrd.gameMatrix)))
				}),
			gameNums) || A2(_aleksivaisanen$bingo_with_elm$Main$checkDiagonals, gmbrd, gameNums))) ? A3(
			_aleksivaisanen$bingo_with_elm$Main$GameOver,
			gmbrd,
			gameNums,
			_elm_lang$core$List$length(gameNums.playedNums)) : A2(_aleksivaisanen$bingo_with_elm$Main$Playing, gmbrd, gameNums);
	});
var _aleksivaisanen$bingo_with_elm$Main$checkWin = F2(
	function (sqr, model) {
		var _p6 = model;
		switch (_p6.ctor) {
			case 'BeginGame':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'Playing':
				var _p8 = _p6._0;
				var _p7 = _p6._1;
				var newMatrix = A2(
					_chendrix$elm_matrix$Matrix$map,
					A4(_aleksivaisanen$bingo_with_elm$Main$pressSquare, true, _p8, _p7, sqr),
					_p8.gameMatrix);
				var newGameboard = _p8;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(
						_aleksivaisanen$bingo_with_elm$Main$checkWinHelper,
						_elm_lang$core$Native_Utils.update(
							newGameboard,
							{gameMatrix: newMatrix}),
						_p7),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$BeginGame = {ctor: 'BeginGame'};
var _aleksivaisanen$bingo_with_elm$Main$createModel = A2(
	_elm_lang$core$Platform_Cmd_ops['!'],
	_aleksivaisanen$bingo_with_elm$Main$BeginGame,
	{ctor: '[]'});
var _aleksivaisanen$bingo_with_elm$Main$GameboardClick = function (a) {
	return {ctor: 'GameboardClick', _0: a};
};
var _aleksivaisanen$bingo_with_elm$Main$createSquare = function (square) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('squareContainer'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('square'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'squareButton', _1: true},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'pressed', _1: square.pressed},
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_aleksivaisanen$bingo_with_elm$Main$GameboardClick(square)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(square.number)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _aleksivaisanen$bingo_with_elm$Main$NextNumber = {ctor: 'NextNumber'};
var _aleksivaisanen$bingo_with_elm$Main$wrapper = F3(
	function (gmbrd, gameNumbers, overlay) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('site-wrapper'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h1,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Your gameboard'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('container'),
								_1: {ctor: '[]'}
							},
							_chendrix$elm_matrix$Matrix$flatten(
								A2(_chendrix$elm_matrix$Matrix$map, _aleksivaisanen$bingo_with_elm$Main$createSquare, gmbrd.gameMatrix))),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_aleksivaisanen$bingo_with_elm$Main$NextNumber),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Next number'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _aleksivaisanen$bingo_with_elm$Main$showPlayedNumbers(gameNumbers.playedNums),
										_1: {
											ctor: '::',
											_0: overlay,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _aleksivaisanen$bingo_with_elm$Main$RandomizeNextGameNumber = function (a) {
	return {ctor: 'RandomizeNextGameNumber', _0: a};
};
var _aleksivaisanen$bingo_with_elm$Main$randomizeNextGameNumber = function (list) {
	return A2(
		_elm_lang$core$Random$generate,
		_aleksivaisanen$bingo_with_elm$Main$RandomizeNextGameNumber,
		_elm_community$random_extra$Random_Extra$sample(list));
};
var _aleksivaisanen$bingo_with_elm$Main$Shuffle = function (a) {
	return {ctor: 'Shuffle', _0: a};
};
var _aleksivaisanen$bingo_with_elm$Main$randomList = function (list) {
	return A2(
		_elm_lang$core$Random$generate,
		_aleksivaisanen$bingo_with_elm$Main$Shuffle,
		_elm_community$random_extra$Random_List$shuffle(list));
};
var _aleksivaisanen$bingo_with_elm$Main$manyRandomLists = function (listOfLists) {
	return _elm_lang$core$Platform_Cmd$batch(
		A2(_elm_lang$core$List$map, _aleksivaisanen$bingo_with_elm$Main$randomList, listOfLists));
};
var _aleksivaisanen$bingo_with_elm$Main$update = F2(
	function (msg, model) {
		var _p9 = msg;
		switch (_p9.ctor) {
			case 'NoOp':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'StartGame':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _aleksivaisanen$bingo_with_elm$Main$manyRandomLists(
						{
							ctor: '::',
							_0: _aleksivaisanen$bingo_with_elm$Main$gameboard.gameboardNumbers,
							_1: {ctor: '[]'}
						})
				};
			case 'Shuffle':
				var newGameboardNumbers = A2(_elm_lang$core$List$take, 25, _p9._0);
				var matrixLists = A2(_aleksivaisanen$bingo_with_elm$Main$split, 5, newGameboardNumbers);
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(
						_aleksivaisanen$bingo_with_elm$Main$Playing,
						_elm_lang$core$Native_Utils.update(
							_aleksivaisanen$bingo_with_elm$Main$gameboard,
							{
								gameMatrix: A3(
									_chendrix$elm_matrix$Matrix$set,
									A2(_chendrix$elm_matrix$Matrix$loc, 2, 2),
									_aleksivaisanen$bingo_with_elm$Main$initSquare(0),
									A2(
										_chendrix$elm_matrix$Matrix$map,
										_aleksivaisanen$bingo_with_elm$Main$initSquare,
										_chendrix$elm_matrix$Matrix$fromList(matrixLists)))
							}),
						_aleksivaisanen$bingo_with_elm$Main$gameNumbers),
					{ctor: '[]'});
			case 'RandomizeNextGameNumber':
				var _p10 = _p9._0;
				if (_p10.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					return A2(_aleksivaisanen$bingo_with_elm$Main$playNextNumber, model, _p10._0);
				}
			case 'NextNumber':
				var _p11 = model;
				switch (_p11.ctor) {
					case 'BeginGame':
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					case 'Playing':
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: _aleksivaisanen$bingo_with_elm$Main$randomizeNextGameNumber(_p11._1.toBePlayed)
						};
					default:
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
				}
			default:
				var _p12 = _p9._0;
				return (!_p12.pressed) ? A2(_aleksivaisanen$bingo_with_elm$Main$checkWin, _p12, model) : A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$StartGame = {ctor: 'StartGame'};
var _aleksivaisanen$bingo_with_elm$Main$playAgainOverlay = function (rounds) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('congratulations'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Congratulations!'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'You won after ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(rounds),
									' rounds!'))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Do you want to play again?'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_aleksivaisanen$bingo_with_elm$Main$StartGame),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Play again!'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _aleksivaisanen$bingo_with_elm$Main$startScreen = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('site-wrapper'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h1,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Elm Bingo!'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Instructions'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Your objective is to get five in a row on your gameboard either vertically, horizontally or diagonally. \n                \'Next number\' button gives you the next number to check on your gameboard. \n                After you see you have the same number on your gameboard, \n                just click on the correct number on your gameboard and that square will turn green.\n                The centermost square is a so-called \'free square\'.\n                It can be used to for 5 in a rows. \n                When you have 5 in a row in your gameboard, you have won the game.'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Simple, isn\'t it?'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h2,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Do you want to start the game?'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_aleksivaisanen$bingo_with_elm$Main$StartGame),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Start game!'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$br,
												{ctor: '[]'},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$br,
													{ctor: '[]'},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Author:'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Aleksi Väisänen 2018'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _aleksivaisanen$bingo_with_elm$Main$view = function (model) {
	var _p13 = model;
	switch (_p13.ctor) {
		case 'BeginGame':
			return _aleksivaisanen$bingo_with_elm$Main$startScreen;
		case 'Playing':
			return A3(
				_aleksivaisanen$bingo_with_elm$Main$wrapper,
				_p13._0,
				_p13._1,
				_elm_lang$html$Html$text(''));
		default:
			return A3(
				_aleksivaisanen$bingo_with_elm$Main$wrapper,
				_p13._0,
				_p13._1,
				_aleksivaisanen$bingo_with_elm$Main$playAgainOverlay(_p13._2));
	}
};
var _aleksivaisanen$bingo_with_elm$Main$main = _elm_lang$html$Html$program(
	{
		init: _aleksivaisanen$bingo_with_elm$Main$createModel,
		view: _aleksivaisanen$bingo_with_elm$Main$view,
		update: _aleksivaisanen$bingo_with_elm$Main$update,
		subscriptions: function (_p14) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
var _aleksivaisanen$bingo_with_elm$Main$NoOp = {ctor: 'NoOp'};
